
{% set project_name = m.cluster.openstack.project %}
{% set project_config = m.config.projects[project_name] %}

# Define required providers
terraform {
  required_version = ">= 0.14.0"
  required_providers {
    openstack = {
      source  = "terraform-provider-openstack/openstack"
      version = "~> 1.48.0"
    }
  }
}

provider "openstack" {
  user_name   = "{{ project_config.user_name }}"
  tenant_name = "{{ project_name }}"
  password    = "{{ project_config.password }}"
  auth_url    = "{{ project_config.auth_url }}"
  region      = "{{ project_config.region }}"
  insecure    = {{ 'true' if project_config.insecure else 'false'}}
}


// ============================================================== Data sources


// -------------------------------------------------- Project

data "openstack_identity_project_v3" "project" {
  name = "{{ project_name }}"
}

// ------------------------------------------ Security groups

{% for referenced_sg in m.data.external_sg %}
data "openstack_networking_secgroup_v2" "{{ m.func.terra_name(referenced_sg) }}" {
  name = "{{ referenced_sg }}"
  tenant_id = data.openstack_identity_project_v3.project.id
}

{% endfor %}

// -------------------------------------------- Dns zone

data "openstack_dns_zone_v2" "dns_zone" {
  name = "{{ project_config.dns_zone }}"
  project_id = data.openstack_identity_project_v3.project.id
}

// -------------------------------------------- Networks

{% for network in m.data.networksToFetch %}
data "openstack_networking_network_v2" "{{ m.func.terra_name(network) }}" {
    name = "{{ network }}"
    tenant_id = data.openstack_identity_project_v3.project.id
}

{% endfor %}

// -------------------------------------------- Images

{% for img in m.data.imagesToFetch %}
data "openstack_images_image_v2" "{{ m.func.terra_name(img) }}" {
    name = "{{ img }}"
}

{% endfor %}

// =================================================== Security groups definition(s)

{% for sg in m.cluster.openstack.security_groups %}

resource "openstack_networking_secgroup_v2" "{{ m.func.terra_name(sg.name) }}" {
  name        = "{{ sg.name }}"
{% if sg.description is defined %}
  description = "{{ sg.description }}"
{% endif %}
  delete_default_rules = true
}
{% endfor %}

{% for sg in m.cluster.openstack.security_groups %}

// -------------------- Rules for sg:{{sg.name}}

// ------------- ingress
{% for rule in sg.inbound_rules %}

resource "openstack_networking_secgroup_rule_v2" "{{  m.func.terra_name(rule._tf_name) }}" {
  direction         = "ingress"
  ethertype         = "IPv4"
  security_group_id = openstack_networking_secgroup_v2.{{  m.func.terra_name(sg.name) }}.id
{%if rule.description is defined %}
  description= "{{ rule.description  }}"
{% endif %}
{% if rule.protocol != "all" %}
  protocol = "{{ rule.protocol }}"
{% endif %}
{% if rule.from_port is defined %}
  port_range_min = "{{ rule.from_port }}"
{% endif %}
{% if rule.to_port is defined %}
  port_range_max = "{{ rule.to_port | default('null') }}"
{% endif %}
{% if rule.remote_cidr is defined %}
  remote_ip_prefix = "{{ rule.remote_cidr }}"
{% endif %}
{% if rule.remote_sg is defined %}
{% if rule._external_sg %}
  remote_group_id = data.openstack_networking_secgroup_v2.{{m.func.terra_name(rule.remote_sg)}}.id
{% else %}
  remote_group_id = openstack_networking_secgroup_v2.{{m.func.terra_name(rule.remote_sg)}}.id
{% endif %}
{% endif %}
}

{% endfor %}

// ------------- egress
{% for rule in sg.outbound_rules %}

resource "openstack_networking_secgroup_rule_v2" "{{  m.func.terra_name(rule._tf_name) }}" {
  direction         = "egress"
  ethertype         = "IPv4"
  security_group_id = openstack_networking_secgroup_v2.{{  m.func.terra_name(sg.name) }}.id
{%if rule.description is defined %}
  description= "{{ rule.description  }}"
{% endif %}
{% if rule.protocol != "all" %}
  protocol = "{{ rule.protocol }}"
{% endif %}
{% if rule.from_port is defined %}
  port_range_min = "{{ rule.from_port }}"
{% endif %}
{% if rule.to_port is defined %}
  port_range_max = "{{ rule.to_port | default('null') }}"
{% endif %}
{% if rule.remote_cidr is defined %}
  remote_ip_prefix = "{{ rule.remote_cidr }}"
{% endif %}
{% if rule.remote_sg is defined %}
{% if rule._external_sg %}
  remote_group_id = data.openstack_networking_secgroup_v2.{{m.func.terra_name(rule.remote_sg)}}.id
{% else %}
  remote_group_id = openstack_networking_secgroup_v2.{{m.func.terra_name(rule.remote_sg)}}.id
{% endif %}
{% endif %}
}

{% endfor %}

{% endfor %}

// =================================================== Flavors definition(s)

{% for flavor in m.cluster.openstack.flavors %}
resource "openstack_compute_flavor_v2" "{{ m.func.terra_name(flavor.name) }}" {
  name  = "{{ flavor.name }}"
  ram   = "{{ flavor._ram_mb }}"
  vcpus = "{{ flavor.vcpus }}"
  disk  = "{{ flavor.disk_gb }}"
}

{% endfor %}

// =================================================== key_pair definition

resource "openstack_compute_keypair_v2" "key_pair" {
  name       = "{{ m.data.key_pair.name }}"
  public_key = "{{ m.data.key_pair.public_key }}"
}


// =================================================== Instances definition(s)

{% for node in m.cluster.nodes %}

// ...................................................... {{ node.name }}

{% for disk in m.data.roleByName[node.role].data_disks %}

resource "openstack_blockstorage_volume_v3" "{{ m.func.terra_name(node.name) }}_{{ disk.index + 1}}" {
  name = "{{ node._os_name }}.{{ disk.index + 1 }}"
  size = {{ disk.size }}
{% if node.openstack.availability_zone is defined %}
  availability_zone = "{{ node.openstack.availability_zone }}"
{% endif %}
}

{% endfor %}

resource "openstack_networking_port_v2" "{{ m.func.terra_name(node.name) }}-0" {
  network_id = data.openstack_networking_network_v2.{{ m.func.terra_name(node.openstack.network)}}.id
  admin_state_up = "true"
  security_group_ids = [{% for sg in m.data.roleByName[node.role].openstack._security_groups %}{%- if loop.index > 1 -%}, {% endif %}
{% if sg.external %}data.openstack_networking_secgroup_v2.{{  m.func.terra_name(sg.name) }}.id
{%- else -%}openstack_networking_secgroup_v2.{{ m.func.terra_name(sg.name) }}.id{%- endif -%}{%- endfor -%} ]
  name = "{{node._os_name}}.0"

{% if m.data.roleByName[node.role].openstack.host_vip %}
{% for record in m.cluster.openstack.dns_records %}
{% if record.set_as_vip %}
{% for ip in record.records %}
  allowed_address_pairs {
    ip_address = "{{ip}}"
  }
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
}

resource "openstack_compute_instance_v2" "{{ m.func.terra_name(node.name) }}" {
  name          = "{{ node._os_name }}"
  image_id      = data.openstack_images_image_v2.{{ m.data.roleByName[node.role].openstack.image }}.id
{% if m.data.roleByName[node.role].openstack._external_flavor %}
  flavor_name   = "{{ m.data.roleByName[node.role].openstack.flavor }}"
{% else %}
  flavor_id = openstack_compute_flavor_v2.{{m.func.terra_name(m.data.roleByName[node.role].openstack.flavor )}}.id
{% endif %}
  key_pair      = "{{ m.data.key_pair.name }}"
{% if node.openstack.availability_zone is defined %}
  availability_zone = "{{ node.openstack.availability_zone }}"
{% endif %}

  network {
    port = openstack_networking_port_v2.{{ m.func.terra_name(node.name) }}-0.id
  }

  block_device {
    uuid                  = data.openstack_images_image_v2.{{ m.data.roleByName[node.role].openstack.image }}.id
    source_type           = "image"
    boot_index            = 0
    destination_type      = "local"
    delete_on_termination = true
  }


{% for disk in m.data.roleByName[node.role].data_disks %}
  block_device {
    uuid                  = openstack_blockstorage_volume_v3.{{ m.func.terra_name(node.name) }}_{{ disk.index +1 }}.id
    source_type           = "volume"
    destination_type      = "volume"
    boot_index            = {{disk.index +1 }}
    delete_on_termination = true
  }

{% endfor %}

}

resource "openstack_dns_recordset_v2" "{{ m.func.terra_name(node.name) }}" {
  zone_id     = data.openstack_dns_zone_v2.dns_zone.id
  name        = "{{node._fqdn}}."
  ttl         = 300
  type        = "A"
  records     = [ openstack_compute_instance_v2.{{ m.func.terra_name(node.name) }}.access_ip_v4]
}


{% endfor %}

// ============================================================== DNS definitions

{% for entry in m.cluster.openstack.dns_records %}

resource "openstack_dns_recordset_v2" "{{ m.func.terra_name(entry.name) }}" {
  zone_id     = data.openstack_dns_zone_v2.dns_zone.id
  name        = "{{entry.name}}"
  ttl         = {{entry.ttl}}
  type        = "{{entry.type}}"
  records     = [ {% for r in entry.records %}{% if loop.index > 1 %} ,{%endif%}"{{r}}"{%endfor%} ]
}



{% endfor %}


