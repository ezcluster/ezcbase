
- hosts: all
  gather_facts: no
  tasks:
  - name: Wait for target instances to become reachable/usable
    tags: [ "always" ]
    wait_for_connection:
      timeout: 600


# We need to grep facts, as json caching reference node by short name (Without taking cluster in account) thus leading missmatcches
- hosts: all
  tasks:
  - gather_facts:



- hosts: all
  vars:
    search_domains: {{{ m.data.search_domains }}}
  roles:
    - role: search_domains
      tags: [ "search_domains" ]


{%% for name, role in m.data.roleByName.items() %%}
{%% if role.openstack.apt_cacher_mode != "none" %%}
- hosts: {{{ name }}}
  roles:
    - role: apt-cacher-client
      apt_cacher_mode: "{{{ role.openstack.apt_cacher_mode }}}"
      apt_cacher_server: "{{{ role.openstack.apt_cacher_server | default('http://????:3142') }}}"
      tags: [ "apt-cacher"]
{%% endif %%}
{%% endfor %%}


- hosts: all
  roles:
    - role: disk_format
      tags: [ "data_disks" ]
    - role: swap_file
      tags: ["base", "swap"]
  tasks:
    - name: Fail if linux distribution is not handled
      tags: ["always"]
      ansible.builtin.fail:
        msg: "{{ansible_facts['distribution']}} is not handled"
      when: not (ansible_facts['distribution'] == 'Ubuntu')

    - name: Set hostname
      ansible.builtin.hostname:
        name: "{{ hostname }}"
      tags: ["hostname"]

    - block:
        - name: Update all packages to their latest version
          tags: [ "update_pkg" ]
          ansible.builtin.apt:
            name: "*"
            state: latest
            update_cache: yes

        - name: Add some useful package
          tags: [ "addon_pkg" ]
          package: pkg=vim,htop,mlocate,ifupdown,net-tools,dnsutils,xfsprogs,whois,screen,ncdu

        - name: Test if reboot is required
          tags: ["always"]
          ansible.builtin.stat:
            path: /var/run/reboot-required
          register: reboot_result

        - name: "Reboot if needed"
          tags: ["always"]
          ansible.builtin.reboot:
            reboot_timeout: 600
          when: reboot_result.stat.exists

      when: ansible_facts['distribution'] == 'Ubuntu'




